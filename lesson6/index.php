<!-- 1 -->
<h2>1.Даны переменные $a=10 и $b=3. Найдите остаток от деления $a на $b.</h2>
<?php
function nz_todo1() {
	$a = 10;
	$b = 3;

	echo $a % $b;
}

nz_todo1();
?>

<!-- 2 -->
<h2>2.Даны переменные $a и $b. Проверьте, что $a делится без остатка на $b.
Если это так - выведите 'Делится' и результат деления, иначе выведите 'Делится с остатком' и остаток от деления</h2>
<?php
function nz_todo2() {
	$a = 10;
	$b = 3;

	if ( $a % $b === 0 ) {
		echo 'delitsa';
	} else {
		echo 'Делится с остатком';
	}
}

nz_todo2();
?>

<!-- 3 -->
<h2>3.Возведите 2 в 10 степень. Результат запишите в переменную $st.</h2>
<?php
function nz_todo3() {
	$st = 2 ** 10;

	echo $st;
}

nz_todo3();
?>

<!-- 4 -->
<h2>4.Найдите квадратный корень из 245.</h2>
<?php
function nz_todo4() {
	$st = sqrt(245);

	echo $st;
}

nz_todo4();
?>

<!-- 5 -->
<h2>5.Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. 
Найдите корень из суммы квадратов его элементов. Для решения воспользуйтесь циклом foreach.</h2>
<?php
function nz_todo5() {
	$arr = [ 4, 2, 5, 19, 13, 0, 10 ];
	$sum = 0;

	foreach ($arr as $val) {
		$sum += $val ** 2;
	}

	echo sqrt( $sum );
}

nz_todo5();
?>

<!-- 6 -->
<h2>6.Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.
Найдите корень из суммы квадратов его элементов. Для решения воспользуйтесь циклом foreach.</h2>
<?php
function nz_todo6() {
	$num = sqrt(379);

	echo $num . '</br>';
	echo round( $num ) . '</br>';
	echo round( $num, 1 ) . '</br>';
	echo round( $num, 2 );
}

nz_todo6();
?>

<!-- 7 -->
<h2>7.Найдите квадратный корень из 587. Округлите результат в большую и меньшую сторону, 
запишите результаты округления в ассоциативный массив с ключами 'floor' и 'ceil'.</h2>
<?php
function nz_todo7() {
	$num  = sqrt(587);
	$val1 = floor( $num );
	$val2 = ceil( $num );

	$arr = [
		'floor' => $val1,
		'ceil'  => $val2,
	];

	var_dump( $arr );
}

nz_todo7();
?>

<!-- 8 -->
<h2>8.Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.</h2>
<?php
function nz_todo8() {
	$arr = [ 4, -2, 5, 19, -130, 0, 10 ];

	echo min( $arr ) . '</br>';
	echo max( $arr );
}

nz_todo8();
?>

<!-- 9 -->
<h2>9.Выведите на экран случайное число от 1 до 100.</h2>
<?php
function nz_todo9() {
	echo mt_rand(1, 100);
}

nz_todo9();
?>

<!-- 10 -->
<h2>10.Заполните массив 10-ю случайными числами</h2>
<?php
function nz_todo10() {
	$arr = [];

	for ($i = 1; $i <= 10; $i++) { 
		$arr[] = mt_rand(1, 100);
	}

	var_dump( $arr );
}

nz_todo10();
?>

<!-- 11 -->
<h2>11.Даны переменные $a и $b. Найдите найдите модуль разности $a и $b. 
Проверьте работу скрипта самостоятельно для различных $a и $b.</h2>
<?php
function nz_todo11() {
	$a = -10;
	$b = -15;

	echo abs( $a ) . '</br>';
	echo abs( $b );
}

nz_todo11();
?>

<!-- 12 -->
<h2>12.Дан массив в числами, к примеру [1, 2, -1, -2, 3, -3]. Создайте из него новый массив так, 
чтобы отрицательные числа стали положительными, то есть у нас должен получиться такой массив: [1, 2, 1, 2, 3, 3].</h2>
<?php
function nz_todo12() {
	$arr     = [ -1, -2, -1, -2, 3, -3 ];
	$new_arr = [];

	foreach ( $arr as $val ) {
		$new_arr[] = abs( $val );
	}

	var_dump( $new_arr );
}

nz_todo12();
?>


<!-- 13 -->
<h2>13. Дано число, например 30. У этого числа есть делители - числа, 
на которое оно делится без остатка. Делители числа 30 - это 1, 2, 3, 5, 6, 10, 15, 30. 
Задача: сделайте массив делителей нашего числа. Число может быть любым, не обязательно, 30.</h2>
<?php
function nz_todo13( $num ) {
	for ( $i = 1; $i <= $num ; $i++ ) { 
		if ( 0 === $num % $i ) {
			echo $i . '</br>';
		}
	}
}

nz_todo13( 30 );
?>

<!-- 14 -->
<h2>14. Дан массив [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
Узнайте, сколько первых элементов массива нужно сложить, чтобы сумма получилась больше 10.</h2>
<?php
function nz_todo14() {
	$arr    = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];
	$result = 0;

	for ( $i = 0; $i <= count( $arr ); $i++ ) { 
		$result += $arr[ $i ];
		if ( 10 <= $result ) {
			echo $i ;
			break;
		}
	}
}

nz_todo14();
?>